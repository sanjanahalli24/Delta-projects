import cv2
import numpy as np
import pandas as pd
import argparse
from sklearn.ensemble import RandomForestClassifier
import pickle

# Creating argument parser to take image path from command line
ap = argparse.ArgumentParser()
ap.add_argument('-i', '--image', required=True, help="Image Path")
args = vars(ap.parse_args())
img_path = args['image']

# Reading the image with opencv
img = cv2.imread(img_path)

# Declaring global variables (used later on)
clicked = False
r = g = b = xpos = ypos = 0

# Reading csv file with pandas and giving names to each column
index = ["color", "color_name", "hex", "R", "G", "B"]
csv = pd.read_csv('colors.csv', names=index, header=None)

# Prepare data for training
X = csv[["R", "G", "B"]]  # Features (RGB values)
y = csv["color_name"]      # Target (color names)

# Train a Random Forest model
rf_model = RandomForestClassifier(n_estimators=100)
rf_model.fit(X, y)

# Save the trained model using pickle (for later use)
with open('color_model.pkl', 'wb') as f:
    pickle.dump(rf_model, f)

# Function to get the predicted color name from the trained model
def getColorName(R, G, B):
    prediction = rf_model.predict([[R, G, B]])  # Make prediction
    return prediction[0]  # Return the predicted color name

# Function to get x,y coordinates of mouse double click
def draw_function(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONDBLCLK:
        global b, g, r, xpos, ypos, clicked
        clicked = True
        xpos = x
        ypos = y
        b, g, r = img[y, x]
        b = int(b)
        g = int(g)
        r = int(r)

cv2.namedWindow('image')
cv2.setMouseCallback('image', draw_function)

while(1):
    cv2.imshow("image", img)
    if (clicked):
        # cv2.rectangle(image, startpoint, endpoint, color, thickness)-1 fills entire rectangle
        cv2.rectangle(img, (20, 20), (750, 60), (b, g, r), -1)

        # Creating text string to display (Color name and RGB values)
        color_name = getColorName(r, g, b)
        text = color_name + ' R=' + str(r) + ' G=' + str(g) + ' B=' + str(b)

        # cv2.putText(img, text, start, font(0-7), fontScale, color, thickness, lineType)
        cv2.putText(img, text, (50, 50), 2, 0.8, (255, 255, 255), 2, cv2.LINE_AA)

        # For very light colors we will display text in black color
        if (r + g + b >= 600):
            cv2.putText(img, text, (50, 50), 2, 0.8, (0, 0, 0), 2, cv2.LINE_AA)

        clicked = False

    # Break the loop when user hits 'esc' key
    if cv2.waitKey(20) & 0xFF == 27:
        break

cv2.destroyAllWindows()
